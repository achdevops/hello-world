name: Docker Image CI

on:
  push:
    branches: [ "feature/actions" ]
  pull_request:
    branches: [ "feature/actions" ]
env:
  LICENSE: "OSS"
  SCANNER_IMAGE: "neuvector/scanner:latest"
  IMAGE_NAME: "ghcr.io/achdevops/hello-world/pyhton-in-actions"
  high_vul_to_fail: 10
  medium_vul_to_fail: 0
  vul_names_to_fail: ""

jobs:
  build-scan-publish:
    runs-on: ubuntu-latest
    environment: secrets

    steps:
    - uses: actions/checkout@v3
    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag $IMAGE_NAME:$GITHUB_RUN_NUMBER

    - name: Security Scan Image
      run: |
          docker run -i --privileged --name nv.scanner -e SCANNER_REPOSITORY=$IMAGE_NAME -e SCANNER_TAG=$GITHUB_RUN_NUMBER -e SCANNER_LICENSE=$LICENSE -v /var/run/docker.sock:/var/run/docker.sock -v /var/neuvector:/var/neuvector  $SCANNER_IMAGE
          docker cp nv.scanner:/var/neuvector/scan_result.json .
          docker rm nv.scanner
    
    - name: Analysis Scan Report & Check Criteria
      run: |
          filename="security-report.csv"
          labels='"name","score","severity","description","package_name","package_version","fixed_version","link","published_timestamp","last_modified_timestamp"'
          vars=".name,.score,.severity,.description,.package_name,.package_version,.fixed_version,.link,.published_timestamp,.last_modified_timestamp"
          query='"report".vulnerabilities[]'
          #transform and export to csv file - scan report
          cat scan_result.json | jq -r '['$labels'],(.'$query' | ['$vars'])|@csv' > $filename
          
          VUL_NUM=`cat scan_result.json | jq '.report.vulnerabilities | length'`
          if [ $VUL_NUM -eq 0 ]; then
            echo No vulnerabilities found.
          else
            echo "Total number of vulnerabilities, $VUL_NUM, grouped by package name with vulnerability name"
            jq '[.report.vulnerabilities | group_by(.package_name) | .[] | {package_name: .[0].package_name, vuln_name: [.[].name]}]' scan_result.json
          fi

          FOUND_HIGH=`cat scan_result.json | jq '.report.vulnerabilities[] | select(.severity == "High") | .severity' | wc -l`
          FOUND_MEDIUM=`cat scan_result.json | jq '.report.vulnerabilities[] | select(.severity == "Medium") | .severity' | wc -l`
          VUL_LIST=`printf '["%s"]' "${vul_names_to_fail//,/\",\"}"`
          VUL_LIST_FOUND=`cat scan_result.json | jq --arg arr "$VUL_LIST" '.report.vulnerabilities[] | select(.name as $n | $arr | index($n)) |.name'`
    
          if [ -z "$VUL_LIST_FOUND" ]; then
            echo -e "Found High Vulnerabilities = $FOUND_HIGH \nFound Medium Vulnerabilities = $FOUND_MEDIUM \n" > scan-summary.txt
          else
            echo -e "Found specific named vulnerabilities: \n$VUL_LIST_FOUND \n\nHigh Vulnerabilities threshold = $high_vul_to_fail \nFound High Vulnerabilities = $FOUND_HIGH \n\nMedium vulnerabilities threshold = $medium_vul_to_fail\nFound Medium Vulnerabilities = $FOUND_MEDIUM \n" > scan-summary.txt
          fi

          if [[ ! -z $VUL_LIST_FOUND ]]; then
            echo Fail due to found specific named vulnerabilities.
            scan_fail="true"
          elif [ $high_vul_to_fail -ne 0 -a $FOUND_HIGH -ge $high_vul_to_fail ]; then
            echo Fail due to high vulnerabilities found exceeds the criteria.
            scan_fail="true"
          elif [ $medium_vul_to_fail -ne 0 -a $FOUND_MEDIUM -ge $medium_vul_to_fail ]; then
            echo Fail due to medium vulnerabilities found exceeds the criteria.
            scan_fail="true"
          else
            echo Pass the criteria check.
            scan_fail="false"
          fi

          if [ $scan_fail == "true" ]; then
            echo -e "Image scanning failed.\n\n" >> scan-summary.txt
            exit 1
          else
            echo -e "Image scanning succeed.\n\n" >> scan-summary.txt
            cat scan-summary.txt
          fi

    - name: 'Security Report Artifact'
      uses: actions/upload-artifact@v3
      with:
        name: my-report
        path: security-report.csv
        retention-days: 5

    - name: Log in to the Container registry
      uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.MY_TOKEN }}
    
    - name: Push Image2Registry
      run: docker push $IMAGE_NAME:$GITHUB_RUN_NUMBER
